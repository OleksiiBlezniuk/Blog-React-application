{"version":3,"sources":["api/api.js","api/comments.js","components/CommentsList/CommentsList.jsx","components/Post/Post.jsx","api/posts.js","components/PostsList/PostsList.jsx","components/Loader/Loader.jsx","components/NewPost/NewPost.jsx","components/Header/Header.jsx","App.jsx","index.js"],"names":["request","endpoint","options","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","status","statusText","getComments","postId","CommentsList","useState","comments","setComments","newCommentText","setNewCommentText","useEffect","className","length","map","comment","key","id","body","onSubmit","event","preventDefault","newComment","Headers","append","method","JSON","stringify","addNewCommentToServer","placeholder","value","onChange","target","type","Post","post","getPosts","title","postTitle","setPostTitle","postBody","setPostBody","postTitleError","setPostTitleError","postBodyError","setPostBodyError","isEditFormVisible","setIsEditFormVisible","onClick","deletePostOnServer","updatedPost","editPostOnServer","classNames","PostsList","posts","Loader","NewPost","setIsNewPostFormVisible","titleError","setTitleError","bodyError","setBodyError","newPost","addNewPostToServer","form","Header","isNewPostFormVisible","App","setPosts","isLoading","setIsLoading","isError","setIsError","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59c72283.chunk.js","sourcesContent":["export const BASE_URL = 'https://bloggy-api.herokuapp.com';\n\nexport function request(endpoint, options) {\n  return fetch(`${BASE_URL}${endpoint}`, options)\n    .then((response) => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      if (!response.headers.get('content-type').includes('application/json')) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n}\n","import { request } from './api';\n\nexport function getComments(postId) {\n  return request(`/comments?postId=${postId}`);\n}\n\nexport function addNewCommentToServer(newComment) {\n  const headers = new Headers();\n\n  headers.append('Content-Type', 'application/json');\n\n  return request(`/comments`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(newComment),\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getComments, addNewCommentToServer } from '../../api/comments';\n\nexport function CommentsList({ postId }) {\n  const [comments, setComments] = useState([]);\n  const [newCommentText, setNewCommentText] = useState('');\n  const addComment = (event) => {\n    event.preventDefault();\n\n    if (!newCommentText) {\n      return;\n    }\n\n    const newComment = {\n      postId,\n      body: newCommentText,\n    };\n\n    addNewCommentToServer(newComment)\n      .then(() => getComments(postId))\n      .then(setComments);\n\n    setNewCommentText('');\n  };\n\n  const handleChange = ({ target }) => {\n    const { value } = target;\n\n    setNewCommentText(value);\n  };\n\n  useEffect(() => {\n    getComments(postId)\n      .then(setComments);\n  }, [postId]);\n\n  return (\n    <div className=\"post__comments\">\n      <h4>Comments:</h4>\n      <ul className=\"list-group\">\n        {comments.length ? comments.map(comment => (\n          <li className=\"list-group-item\" key={comment.id}>\n            {comment.body}\n          </li>\n        )) : (\n          <p className=\"post__comments-error\">\n            <em>There is no comments yet</em>\n          </p>\n        )\n      }\n      </ul>\n      <form\n        className=\"post__comments-form\"\n        onSubmit={addComment}\n      >\n        <label className=\"form-label\">\n          Your comment:&nbsp;\n          <textarea\n            className=\"form-control\"\n            placeholder=\"Type your comment here\"\n            value={newCommentText}\n            onChange={handleChange}\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary post__comment-button\"\n        >\n          Add new comment\n        </button>\n      </form>\n    </div>\n  );\n}\n\nCommentsList.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport { editPostOnServer, deletePostOnServer } from '../../api/posts';\n\nimport './Post.scss';\n\nexport function Post({ post, getPosts }) {\n  const [postTitle, setPostTitle] = useState(post.title);\n  const [postBody, setPostBody] = useState(post.body);\n  const [postTitleError, setPostTitleError] = useState(false);\n  const [postBodyError, setPostBodyError] = useState(false);\n  const [isEditFormVisible, setIsEditFormVisible] = useState(false);\n  const changeTitle = ({ target }) => {\n    const { value } = target;\n\n    setPostTitle(value);\n    setPostTitleError(false);\n  };\n\n  const changeBody = ({ target }) => {\n    const { value } = target;\n\n    setPostBody(value);\n    setPostBodyError(false);\n  };\n\n  const editPost = (event) => {\n    event.preventDefault();\n\n    if (!postTitle) {\n      setPostTitleError(true);\n    }\n\n    if (!postBody) {\n      setPostBodyError(true);\n    }\n\n    if (!postTitle || !postBody) {\n      return;\n    }\n\n    const updatedPost = {\n      title: postTitle,\n      body: postBody,\n    };\n\n    editPostOnServer(post.id, updatedPost)\n      .then(() => {\n        setPostTitle(post.title);\n        setPostBody(post.body);\n        setIsEditFormVisible(false);\n        getPosts();\n      });\n  };\n\n  return (\n    <div className=\"post\">\n      <div className=\"post__header\">\n        <h3 className=\"post__title\">\n          {post.title}\n        </h3>\n        <div className=\"btn-group\">\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={() => setIsEditFormVisible(true)}\n          >\n            Edit post\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deletePostOnServer(post.id)\n                .then(() => getPosts());\n            }}\n          >\n            Delete post\n          </button>\n        </div>\n      </div>\n      <div className=\"post__body\">\n        <p className=\"post__content\">\n          {post.body}\n        </p>\n        {isEditFormVisible && (\n          <form\n            className=\"post__form\"\n            onSubmit={editPost}\n          >\n            <label className=\"form-label\">\n              Edit title:\n              <input\n                type=\"text\"\n                value={postTitle}\n                onChange={changeTitle}\n                className=\"form-control\"\n              />\n              <p className={classNames('error-message', {\n                'error-message--visible': postTitleError,\n              })}\n              >\n                Please enter title of your post\n              </p>\n            </label>\n            <label className=\"form-label\">\n              Edit text:\n              <textarea\n                type=\"text\"\n                value={postBody}\n                onChange={changeBody}\n                className=\"form-control post__text-input\"\n              />\n              <p className={classNames('error-message', {\n                'error-message--visible': postBodyError,\n              })}\n              >\n                Please enter text of your post\n              </p>\n            </label>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n            >\n              Submit changes\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => {\n                setIsEditFormVisible(false);\n                setPostTitle(post.title);\n                setPostBody(post.body);\n                setPostTitleError(false);\n                setPostBodyError(false);\n              }}\n            >\n              Cancel\n            </button>\n          </form>\n        )}\n        <CommentsList postId={post.id} />\n      </div>\n    </div>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  getPosts: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport function getPostsFromServer() {\n  return request(`/posts`);\n}\n\nexport function addNewPostToServer(newPost) {\n  const headers = new Headers();\n\n  headers.append('Content-Type', 'application/json');\n\n  return request(`/posts`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(newPost),\n  });\n}\n\nexport function editPostOnServer(postId, updatedPost) {\n  const headers = new Headers();\n\n  headers.append('Content-Type', 'application/json');\n\n  return request(`/posts/${postId}`, {\n    method: 'PUT',\n    headers,\n    body: JSON.stringify(updatedPost),\n  });\n}\n\nexport function deletePostOnServer(postId) {\n  const headers = new Headers();\n\n  headers.append('Content-Type', 'application/json');\n\n  return request(`/posts/${postId}`, {\n    method: 'DELETE',\n    headers,\n  });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Post } from '../Post/Post';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, getPosts }) => (\n  <div className=\"PostsList\">\n    <h2 className=\"PostList__title\">\n      Posts:\n    </h2>\n\n    <ul className=\"list-group\">\n      {posts.map(post => (\n        <li key={post.id} className=\"list-group-item post\">\n          <Post post={post} getPosts={getPosts} />\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  getPosts: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { addNewPostToServer } from '../../api/posts';\n\nimport './NewPost.scss';\n\nexport function NewPost({ setIsNewPostFormVisible, getPosts }) {\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [bodyError, setBodyError] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!postTitle) {\n      setTitleError(true);\n    }\n\n    if (!postBody) {\n      setBodyError(true);\n    }\n\n    if (!postTitle || !postBody) {\n      return;\n    }\n\n    const newPost = {\n      title: postTitle,\n      body: postBody,\n    };\n\n    addNewPostToServer(newPost)\n      .then(() => {\n        getPosts();\n        setPostTitle('');\n        setPostBody('');\n        setIsNewPostFormVisible('false');\n      });\n  };\n\n  const changeTitle = ({ target }) => {\n    setPostTitle(target.value);\n    setTitleError(false);\n  };\n\n  const changeBody = ({ target }) => {\n    setPostBody(target.value);\n    setBodyError(false);\n  };\n\n  return (\n    <div className=\"new-post\">\n      <form\n        id=\"new-post-form\"\n        className=\"new-post__form\"\n        onSubmit={handleSubmit}\n      >\n        <label className=\"form-label\">\n          Post title:\n          <input\n            type=\"text\"\n            value={postTitle}\n            onChange={changeTitle}\n            placeholder=\"Type post title here\"\n            className=\"form-control\"\n          />\n          <p className={classNames('error-message', {\n            'error-message--visible': titleError,\n          })}\n          >\n            Please enter title of your post\n          </p>\n        </label>\n\n        <label>\n          Post text:\n          <textarea\n            value={postBody}\n            onChange={changeBody}\n            placeholder=\"Type post text here\"\n            className=\"form-control\"\n          />\n          <p className={classNames('error-message', {\n            'error-message--visible': bodyError,\n          })}\n          >\n            Please enter text of your post\n          </p>\n        </label>\n      </form>\n      <div className=\"new-post__buttons\">\n        <button\n          type=\"submit\"\n          form=\"new-post-form\"\n          className=\"btn btn-primary\"\n        >\n          Save post\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger\"\n          onClick={() => setIsNewPostFormVisible(false)}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n}\n\nNewPost.propTypes = {\n  setIsNewPostFormVisible: PropTypes.func.isRequired,\n  getPosts: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewPost } from '../NewPost';\n\nimport './Header.scss';\n\nexport function Header({ getPosts }) {\n  const [isNewPostFormVisible, setIsNewPostFormVisible] = useState(false);\n\n  return (\n    <header className=\"App__header header\">\n      <h1 className=\"header__title\">\n        Blog React Application\n      </h1>\n\n      <div className=\"header__content\">\n        {!isNewPostFormVisible && (\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => setIsNewPostFormVisible(true)}\n          >\n            Create new post\n          </button>\n        )}\n\n        {isNewPostFormVisible\n          && (\n          <NewPost\n            setIsNewPostFormVisible={setIsNewPostFormVisible}\n            getPosts={getPosts}\n          />\n          )\n        }\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { getPostsFromServer } from './api/posts';\nimport { Loader } from './components/Loader';\nimport { Header } from './components/Header';\n\nimport './App.scss';\n\nexport function App() {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const getPosts = () => {\n    setIsLoading(true);\n\n    getPostsFromServer()\n      .then(setPosts)\n      .then(() => {\n        setIsLoading(false);\n        setIsError(false);\n      })\n      .catch(() => {\n        setIsError(true);\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <Header getPosts={getPosts} />\n\n      <main className=\"App__main\">\n        {isError && (\n          <h2 className=\"error-title\">\n            An error occurred while loading data\n          </h2>\n        )}\n        {isLoading ? (\n          <Loader />\n        ) : isError || (\n          <PostsList posts={posts} getPosts={getPosts} />\n        )}\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}